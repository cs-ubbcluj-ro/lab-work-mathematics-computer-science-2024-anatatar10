1.1 Alphabet:

	1.	a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
	2.	b. Underscore character _
	3.	c. Decimal digits (0-9)

1.2 Lexical

	1.	a. Special symbols:
	•	Operators: + - * % / = < <=
	•	Separators: [ ] { } , : ; space
	•	Reserved Words: int, if, else, while, do, bool, char, cin, cout, main, double, string, struct

	2.	b. Identifiers:
	•	A sequence of letters, digits, and underscores, where the first character must be a letter or an underscore.
	•	Rule: identifier ::= letter {letter | digit | _}
	•	letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
	•	digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

	3.	c. Constants:
	•	int_const ::= +no|-no|no
	•	no ::= digit {digit}
	•	char_const ::= "'" (letter | digit) "'"

1.3 Syntax

	1.	Program Structure:
	•	program ::= 'int main() { stmt_list return 0; }'

	2.	Statement Lists and Statements:
	•	stmt_list ::= stmt | stmt ';' stmt_list
	•	stmt ::= stmt_simple | stmt_struct

	3.	Simple Statements:
	•	stmt_simple ::= stmt_assign | stmt_io
	•	stmt_assign ::= identifier "=" expression
	•	stmt_io ::= "cin >>" identifier | "cout <<" identifier

	4.	Structured Statements:
	•	stmt_struct ::= stmt_cmpd | stmt_if | stmt_while
	•	stmt_cmpd ::= '{' stmt_list '}'
	•	stmt_if ::= 'if' '(' condition ')' stmt ['else' stmt]
	•	stmt_while ::= 'while' '(' condition ')' stmt
	•	struct_decl ::= 'struct' identifier '{' member_list '}'

	5.	Member List:
	•	member_list ::= member_decl | member_decl ';' member_list
	•	member_decl ::= DataType identifier

	6.	Data Types:
	•	DataType ::= int | bool | char | string | double | struct identifier

	7.	Conditions:
	•	condition ::= expression rel_op expression
	•	rel_op ::= "<" | "<=" | ">" | ">=" | "==" | "!="

	8.	Expressions and Terms:
	•	expression ::= term | expression "+" term | expression "-" term
	•	term ::= factor | term "*" factor | term "/" factor | term "%" factor
	•	factor ::= "(" expression ")" | identifier | int_const
