{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14180\viewh14760\viewkind0
\deftab720
\pard\pardeftab720\sa319\partightenfactor0

\f0\fs36 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Language Definition\
1.1 Alphabet:\
    \'95 a. Upper (A-Z) and lower case letters (a-z) of the English alphabet\
    \'95 b. Underscore character _\
    \'95 c. Decimal digits (0-9)\
\
1.2 Lexical\
    a. Special symbols:\
    \uc0\u8259  Operators: + - * % / := < <= \
    \uc0\u8259  Separators: [ ] \{ \} , : ; space\
    \uc0\u8259  Reserved Words: read, write, int, if, else, while, begin, end, then, var, do, bool, char, struct\
\
    b. Identifiers:\
    \uc0\u8259  A sequence of letters and digits, where the first character is a letter.\
    \uc0\u8259  Rule:    identifier ::= letter \{letter | digit\} \
                 letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"\
                 digit ::= "0" | "2" | "4" |  "6" | "8"  -- Only even digits are allowed\
\
    c. Constants:\
    \uc0\u8259  int_const ::= +no|-no|no\
        no ::= digit \{digit\}\
                     \
    \uc0\u8259  char_const ::= "'" (letter | digit) "'"\
\
\
2. Syntax\
    program ::= \'93BEGIN\'94 stmt_list \'93END\'94\
    stmt_list ::= stmt | stmt \'93;\'94 stmt_list\
    stmt ::= stmt_simple | stmt_struct\
    stmt_simple ::= stmt_assign | stmt_io\
    stmt_assign ::= identifier ":=" expression\
    stmt_io ::= "read" "(" identifier ")" | "write" "(" identifier ")"\
    stmt_struct ::= stmt_cmpd | stmt_if | stmt_while\
    stmt_cmpd ::= "BEGIN" stmt_list "END"\
    stmt_if ::= "if" condition "THEN" stmt ["ELSE" stmt]\
    stmt_while ::= "WHILE" condition "DO" stmt\
    condition ::= expression rel_op expression\
    \
    rel_op ::= "<" | "<=" \
\
    expression ::= term | expression "+" term | expression "-" term\
\
    term ::= factor | term "*" factor | term "/" factor | term "%" factor\
\
    factor ::= "(" expression ")" | identifier | int_const\
}